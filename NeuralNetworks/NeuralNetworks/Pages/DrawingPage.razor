@page "/drawing"
@inject IJSRuntime JS
@inject HttpClient Http
@using MultiLevelNeurons;
@using MultiLevelNeurons.Data

@*<canvas @ref="canvasRef" width="40" height="40"
        @onmousedown="StartDrawing"
        @onmouseup="StopDrawing"
        @onmousemove="Draw"
        style="border:1px solid black; width: 150px; height: 150px;"></canvas>

<br>
<input id="letterInput" type="text" @bind="inputLetter" placeholder="Write the letter you drew" /> 

<button @onclick="ClearCanvas">Clear</button>
<button @onclick="Resize">Resize</button>
<button @onclick="AddToDataset">Add to dataset</button>
<button @onclick="Verify">Verify</button>
<p>
    <button @onclick="Learn">Learn</button>
    <input id="iterinput" type="number" @bind="iter" placeholder="iteratoins for genetic algorithm" /> 
</p>


@learning

<h1>@Result</h1>


@if (VerifyOutput != null)
{
    @for (int i = 0; i < VerifyOutput.Length; i++)
        {
            @string.Concat(new string[]{VerifyOutput[i].ToString(), " - ", ((char)('A' + i)).ToString(), "\n"});
        }
}*@

<div class="container mt-4">
    <div class="row">
        <div class="col-md-6">
            <canvas @ref="canvasRef" width="40" height="40"
                    @onmousedown="StartDrawing"
                    @onmouseup="StopDrawing"
                    @onmousemove="Draw"
                    class="border border-dark"
                    style="width: 150px; height: 150px;">
            </canvas>
        </div>
        <div class="col-md-6">
            <input id="letterInput" type="text" @bind="inputLetter" class="form-control mb-2" placeholder="Write the letter you drew" />

            <div class="d-grid gap-2">
                <button @onclick="ClearCanvas" class="btn btn-secondary">Clear</button>
                <button @onclick="Resize" class="btn btn-primary">Resize</button>
                <button @onclick="AddToDataset" class="btn btn-success">Add to dataset</button>
                <button @onclick="Verify" class="btn btn-warning">Verify</button>
            </div>
        </div>
    </div>

    <div class="row mt-4">
        <div class="col-md-6">
            <div class="d-flex align-items-center">
                <button @onclick="Learn" class="btn btn-info me-2">Learn</button>
                <p>
                 <label>Iter</label>   
                <input id="iterinput" type="number" @bind="iter" class="form-control" placeholder="Iterations for genetic algorithm" />
                </p>
            </div>
        </div>
    </div>

    <div class="row mt-4">
        <div class="col-md-12">
            <h1 class="text-center">@Result</h1>
            @if (VerifyOutput != null)
            {
                <ul class="list-group">
                    @for (int i = 0; i < VerifyOutput.Length; i++)
                    {
                        <li class="list-group-item">
                            @string.Concat(new string[] { VerifyOutput[i].ToString(), " - ", ((char)('A' + i)).ToString() })
                        </li>
                    }
                </ul>
            }
        </div>
    </div>
</div>

@code {
    private ElementReference canvasRef;
    private bool isDrawing = false;
    private List<IData> dataset = Letters.set_of_letters;

    private double[] VerifyOutput = null;

    private string learning;

    private string Result;

    private Char inputLetter;
    private int iter = 0;

    private async Task Learn()
    {
        var imageDataArray = await JS.InvokeAsync<double[]>("drawing.getBinaryImageDataArray", canvasRef);

        //network.learn(dataset);

        learning = "The network is learning...";
        int numbOfIter = await Http.GetFromJsonAsync<int>($"network/learn?iter={iter}");
        learning = "The network has learned.;";
    }

    private async Task Verify()
    {
        var imageDataArray = await JS.InvokeAsync<double[]>("drawing.getBinaryImageDataArray", canvasRef);

        //double[] result = network.getLetter(new Letter(imageDataArray));

        var resultMessage = await Http.PostAsJsonAsync<Letter>("network/verify", new Letter(imageDataArray));

        VerifyOutput = await resultMessage.Content.ReadFromJsonAsync<double[]>();

        double numb = VerifyOutput[0];
        var index = 0;
        for(int i = 1; i < VerifyOutput.Length; i++)
        {
            if (numb < VerifyOutput[i])
            {
                numb = VerifyOutput[i];
                index = i;
            }
        }
        Result = string.Concat(new string[]{VerifyOutput[index].ToString(), " - ", ((char)('A' + index)).ToString(), "\n"});
        //for (int i = 0; i < result.Length; i++)
        //    Console.WriteLine(result[i]);
    }

    private async Task AddToDataset()
    {
        var imageDataArray = await JS.InvokeAsync<double[]>("drawing.getBinaryImageDataArray", canvasRef);

        //dataset.Add(new Letter(imageDataArray));
        await Http.PostAsJsonAsync<Letter>("network", new Letter(imageDataArray, inputLetter));
    }









    private async Task StartDrawing(MouseEventArgs e)
    {
        isDrawing = true;
        await JS.InvokeVoidAsync("drawing.startDrawing", canvasRef, e.ClientX, e.ClientY);
    }

    private async Task StopDrawing(MouseEventArgs e)
    {
        isDrawing = false;
        await JS.InvokeVoidAsync("drawing.stopDrawing");
    }

    private async Task Draw(MouseEventArgs e)
    {
        if (isDrawing)
        {
            await JS.InvokeVoidAsync("drawing.draw", canvasRef, e.ClientX, e.ClientY);
        }
    }

    private async Task ClearCanvas()
    {
        await JS.InvokeVoidAsync("drawing.clearCanvas", canvasRef);
    }

    private async Task Resize()
    {
        await JS.InvokeVoidAsync("drawing.centerAndResizeDrawing");
    }

    //private async Task GetImageData()
    //{
    //    // Call the JavaScript function and get the image data array
    //    var imageDataArray = await JS.InvokeAsync<double[]>("drawing.getBinaryImageDataArray", canvasRef);

    //    // Use imageDataArray as needed
    //    //Console.WriteLine("Image data length: " + imageDataArray);

    //    for (int i = 0; i < 40; i++)
    //    {
    //        for (int j = 0; j < 40; j++)
    //        {
    //            Console.Write($"{imageDataArray[(i * 40) + j]}, ");
    //        }
    //        Console.WriteLine();
    //    }
    //}
}

